
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: AcF_351b_Python_Stream_Final_Exam_Part_II.ipynb

import pandas as pd
import numpy as np
from pandas.tseries.offsets import MonthEnd, QuarterEnd, QuarterBegin
from dateutil import parser
import time
import matplotlib.pyplot as plt

try:
    import wrds
except:
    !pip3 install wrds

# imported extra moduels:
import wrds
from dateutil.relativedelta import relativedelta
from dateutil.parser import parse

#df = pd.read_csv("https://frankxu1987.weebly.com/uploads/6/2/5/8/62583677/acf351b_bonds.csv")
df = pd.read_csv("acf351b_bonds.csv")
df['date']=pd.to_datetime(df['date'], format="%Y-%m-%d")
df.head(1)

conn = wrds.Connection()

# liy78
# Natasha370lyx.

# Code script for Q 1.1
# Complete the code script below.

stmt="""

select permno, date
from crsp.dsf
where permno in {}
and
date between '2014-07-01' AND '2017-12-31'

""".format(tuple(df.loc[df['permno'].notnull(), 'permno'].unique()))


df_vol = conn.raw_sql(stmt, date_cols=['date'])

# the length of the dataframe should be close to 68000
print(len(df_vol))

# Code script for Q 1.2
# write your code script below.
print(df.groupby(['permno']).rolling(window=3).std())


# Code script for Q 1.3
# Write your code script below

df = pd.merge(df, df_vol, how = "left", on=["permno", "date"], )
print(df)

df_rating=pd.read_csv("acf351b_ratings.csv")
df_rating.head(1)

# Code script for Q 2.1
# Write your code script below

def convert(rule, value):
    if rule == "MR":
        if value == "Aaa":
            return "AAA"
        elif value == "Aa1" or value == "Aa2" or value == "Aa3":
            return "AA"
        elif value == "A1" or value == "A1" or value == "A3":
            return "A"
        elif value == "Baa1" or value == "Baa2" or value == "Baa3":
            return "BBB"
        elif value == "Ba1" or value == "Ba2" or value == "Ba3":
            return "BB"
        elif value == "B1" or value == "B2" or value == "B3":
            return "B"
        elif value == "Caa1" or value == "Caa2" or value == "Caa3" or value == "Ca" or value == "C":
            return "C"
        elif value == "NR":
            return "NR";

    if rule == "SPR":
        if value == "AAA":
            return "AAA"
        elif value == "AA+" or value == "AA" or value == "AA-":
            return "AA"
        elif value == "A+" or value == "A" or value == "A-":
            return "A"
        elif value == "BBB+" or value == "BBB" or value == "BBB-":
            return "BBB"
        elif value == "BB+" or value == "BB" or value == "BB-":
            return "BB"
        elif value == "B+" or value == "B" or value == "B-":
            return "B"

        elif value == "CCC+" or value == "CCC" or value == "CCC-" or value == "CC" or value == "C" or value == "D":
            return "C"

        elif value == "NR":
            return "NR";

    if rule == "FR":
        if value == "AAA":
            return "AAA"

        elif value == "AA+" or value == "AA" or value == "AA-":
            return "AA"

        elif value == "A+" or value == "A" or value == "A-":
            return "A"

        elif value == "BBB+" or value == "BBB" or value == "BBB-":
            return "BBB"

        elif value == "BB+" or value == "BB" or value == "BB-":
            return "BB"

        elif value == "B+" or value == "B" or value == "B-":
            return "B"

        elif value == "CCC" or value == "CC" or value == "C" or value == "DDD" or value == "DDD" or value == "D":
            return "C"

        elif value == "NR":
            return "NR";


filename = "acf351b_ratings.csv"
df_rating=pd.read_csv("acf351b_ratings.csv")
rating_type = df_rating["rating_type"]
rating = df_rating["rating"]

std_rating = []
for t, r in zip(rating_type, rating):
    std_rating.append(convert(t, r))

# 是不是要打印
# print(std_rating)

# 写回到源文件
df_rating["std_rating"] = std_rating
df_rating.to_csv(filename,index=None)

#Code script for Q 2.2
#Write your code script below

issue_id = df_rating["issue_id"]
rating_date = df_rating["rating_date"]
std_rating = df_rating["std_rating"]

mapping = {}

for ID, date in zip(issue_id, rating_date):
    if ID in mapping:
        current = time.strptime(mapping[ID], "%m/%d/%Y")
        if current > last:
            last = current
            mapping[ID] = date
    else:
        last = time.strptime("01/01/2000", "%m/%d/%Y")
        mapping[ID] = date

new_rating = []
for ID, date, rating in zip (issue_id, rating_date, std_rating):
    if mapping[ID] == date:
        new_rating.append(rating)
    else:
        new_rating.append(None)

# 写回到源文件
df_rating["new_rating"] = new_rating
df_rating.to_csv(filename,index=None)

#df_treasury = pd.read_csv("https://frankxu1987.weebly.com/uploads/6/2/5/8/62583677/zero_coupon_yld.csv")
df_treasury = pd.read_csv("zero_coupon_yld.csv")
df_treasury.head(1)

#Code script for Q 3.1
#Write your code script below

# pd.merge(df, df_treasury, how='left',on='date') # time.strptime(, "%Y-%m-%d"))


#Code script for Q 3.2
#Write your code script below

def yearsago(years, from_date=None):
    return from_date - relativedelta(years=years)

df['date']=pd.to_datetime(df['date'], format="%Y-%m-%d")
df['maturity']=pd.to_datetime(df['maturity'], format="%Y-%m-%d")

date = df["date"]
maturity = df["maturity"]
ttm = []
second_year = (365 * 24 * 60 * 60)

for d, m in zip(date, maturity):
    date1 = parse(str(d))
    date2 = parse(str(m))
    result = (date2 - date1).total_seconds()
    result /= second_year
    ttm.append(result)
df["ttm"] = ttm
df.to_csv("acf351b_bonds.csv",index=None)

#Code script for Q 3.3
#Write your code script below
ttm = df["ttm"]
treasury_yield = []
for t in ttm:
    i = t+0.5
    treasury_yield.append(int(i))

df["treasury_yield"] = treasury_yield
df.to_csv("acf351b_bonds.csv",index=None)

df['spread']= df['yield']-df['treasury_yield'];

#Code script for Q 4.1
#Write your code script below

ttm = df["ttm"]
spread = df["spread"]

# 去除重复的
ttm = sorted(set(ttm))
spread = sorted(set(spread))

first = int(0.01 * len(ttm))
last = int(0.99 * len(ttm))

print(ttm[first], spread[first])
print(ttm[last], spread[last])


print()

#Code script for Q 4.2
#Write your code script below

d_list = df.values.tolist()
df['spread']= df['yield']-df['treasury_yield'];

first = int(0.01 * len(ttm))
last = int(0.99 * len(ttm))

ttm_up = ttm[last]
ttm_down = ttm[first]
spread_down = spread[first]
spread_up = spread[last]

filter_list = []
for i in d_list:
    if i[-3] is not None:
        d_ttm = int(i[-3])
    if i[-1] is not None:
        sp = float(i[-1])
    if d_ttm < ttm_down or d_ttm > ttm_up:
        continue
    if sp < spread_down or sp > spread_up:
        continue
    filter_list.append(i)

#print(filter_list)



title = df.keys() # ["issue_id", "date", "yield", "month", "quant","offering_date","maturity", "country_GBR","permno", "ttm" , "treasury_yield" , "spread"]
test=pd.DataFrame(columns=title, data=filter_list)
test.to_csv('4.2.csv')

